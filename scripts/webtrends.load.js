// Generated by CoffeeScript 1.6.3
/*
  This code provides proper scoping and encapsulation of variables being fed into Webtrends
*/


(function() {
  var rules;

  window.Example = (function() {
    function Example() {}

    Example.prototype.runRule = function(stopFn, factors) {
      return function(example) {
        return function(ev) {
          var uem_ele, uem_evt;
          if (!stopFn.call(example)) {
            return true;
          }
          uem_ele = $(this).attr("id");
          uem_evt = $(this).data("etype");
          example.webtrendsCall(factors, uem_evt, uem_ele);
          console.log("running rule");
          return true;
        };
      };
    };

    Example.prototype.webtrendsCall = function(factors, uem_evt, uem_ele) {
      var args;
      args = {
        args: {
          "DCSext.tce_it": factors["1"],
          "DCSext.tce_ia": factors["0"],
          "DCSext.tce_iw": this.countFactors(factors),
          "DCSext.tce_fs": this.countFactors(factors) * factors["0"],
          "DCSext.tce_wa": this.stringifyFactors(factors),
          "DCSext.tls_qr": factors["6"],
          "DCSext.uem_evt": uem_evt,
          "DCSext.uem_ele": uem_ele
        }
      };
      Webtrends.multiTrack(args);
      return true;
    };

    Example.prototype.$type = function(obj) {
      "use strict";
      return {}.toString.call(obj).match(/\s([a-zA-Z]+)/)[1].toLowerCase();
    };

    Example.prototype.stringifyFactors = function(gg) {
      "use strict";
      var factor, flist, value;
      flist = [];
      for (factor in gg) {
        value = gg[factor];
        if (value > 0 && (value != null)) {
          flist.push(factor.toString());
        }
      }
      return flist.join(',');
    };

    Example.prototype.countFactors = function(gg) {
      "use strict";
      var factor, total, value;
      total = 0;
      for (factor in gg) {
        value = gg[factor];
        if (factor !== "0" && this.$type(value) === "number") {
          total += value;
        }
      }
      return total;
    };

    Example.prototype.baseline = function(gg) {
      var factors;
      factors = {
        0: 1,
        1: 0,
        2: 0,
        3: 0,
        4: 0,
        5: 0,
        6: "DSSADI134321412"
      };
      factors["1"] = 1;
      factors["3"] = 3;
      gg.DCSext.tce_wa = this.stringifyFactors(factors);
      gg.DCSext.tce_iw = this.countFactors(factors);
      gg.DCSext.tce_fs = this.countFactors(factors) * factors["0"];
      return true;
    };

    Example.prototype.binder = function(selector, etype, thefunc) {
      var elements;
      $("body").delegate(selector, "mouseenter", function(etype) {
        $(this).data("etype", etype);
        return true;
      });
      elements = $(selector);
      if (elements.length > 0) {
        return elements.bind(etype, thefunc);
      } else {
        return $("body").delegate(selector, etype, thefunc);
      }
    };

    Example.prototype.init = function(wtinstance, rules) {
      var rule, selector, _i, _len, _ref, _results;
      this.rules = rules;
      /* this kicks off the binding for tracking*/

      _ref = this.rules;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        rule = _ref[_i];
        if (rule.etype != null) {
          /* Only attempt to bind where event type defined*/

          if (!rule.selector) {
            if (rule.id) {
              selector = ".rules[id=\"" + rule.id + "\"]";
            }
          } else {
            selector = rule.selector;
          }
          _results.push(this.binder(selector, rule.etype, rule.run(this)));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    return Example;

  })();

  /*
    instantiation of the example code
  */


  window.example = new window.Example();

  /*
    Note in these rules that the function defines new values for existing variables. These
    variables are passed in as return values.
  */


  rules = [
    {
      name: "clicksFirstButton",
      selector: "#first",
      id: "",
      etype: "click",
      run: window.example.runRule(function() {
        return true;
      }, {
        0: 1,
        3: 1,
        6: "aaa3"
      })
    }, {
      name: "clicksSecondButton",
      selector: "#second",
      id: "",
      etype: "click",
      run: window.example.runRule(function() {
        return true;
      }, {
        0: 3,
        3: 2,
        6: "bbb1"
      })
    }
  ];

  /*
  # WebTrends SmartSource Data Collector Tag v10.2.36
  # Copyright (c) 2012 Webtrends Inc.	All rights reserved.
  # Tag Builder Version: 4.1.0.33
  # Created: 2012.08.24
  */


  $(document).ready(function() {
    window.webtrendsAsyncInit = function() {
      var dcs;
      dcs = new Webtrends.dcs();
      dcs.init({
        dcsid: "dcsx399cuvz5bdjtqdgcadhf3_2t6d",
        domain: "statse.webtrendslive.com",
        timezone: 0,
        i18n: true,
        offsite: false,
        download: false,
        vtid: "werwe23423423234",
        downloadtypes: "xls,doc,pdf,txt,csv,zip,docx,xlsx,rar,gzip,dwg,ppt,pptx",
        onsitedoms: "example.com exampledealer.com",
        fpcdom: ".example.com"
      });
      window.example.init(dcs, rules);
      return dcs.track();
    };
    return (function() {
      var s, s2;
      s = document.createElement("script");
      s.async = true;
      s.src = "//s.webtrends.com/js/webtrends.js";
      s2 = document.getElementsByTagName("script")[0];
      s2.parentNode.insertBefore(s, s2);
      return true;
    })();
  });

}).call(this);
